// Code generated by mockery v2.42.2. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

type TaskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskRepository) EXPECT() *TaskRepository_Expecter {
	return &TaskRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: c
func (_m *TaskRepository) Create(c context.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TaskRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - c context.Context
func (_e *TaskRepository_Expecter) Create(c interface{}) *TaskRepository_Create_Call {
	return &TaskRepository_Create_Call{Call: _e.mock.On("Create", c)}
}

func (_c *TaskRepository_Create_Call) Run(run func(c context.Context)) *TaskRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TaskRepository_Create_Call) Return(_a0 error) *TaskRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_Create_Call) RunAndReturn(run func(context.Context) error) *TaskRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FetchByUserID provides a mock function with given fields: c, userID
func (_m *TaskRepository) FetchByUserID(c context.Context, userID string) error {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_FetchByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchByUserID'
type TaskRepository_FetchByUserID_Call struct {
	*mock.Call
}

// FetchByUserID is a helper method to define mock.On call
//   - c context.Context
//   - userID string
func (_e *TaskRepository_Expecter) FetchByUserID(c interface{}, userID interface{}) *TaskRepository_FetchByUserID_Call {
	return &TaskRepository_FetchByUserID_Call{Call: _e.mock.On("FetchByUserID", c, userID)}
}

func (_c *TaskRepository_FetchByUserID_Call) Run(run func(c context.Context, userID string)) *TaskRepository_FetchByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskRepository_FetchByUserID_Call) Return(_a0 error) *TaskRepository_FetchByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_FetchByUserID_Call) RunAndReturn(run func(context.Context, string) error) *TaskRepository_FetchByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
